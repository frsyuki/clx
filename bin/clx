#!/usr/bin/env ruby

begin
require 'rubygems'
rescue Exception
end
require 'msgpack/rpc'
require 'clx/default'
require 'clx/addr'
require 'yaml'

TIMEOUT = 5.0
DOT_CLX = ENV['CLX_INFO'] || ENV['HOME']+"/.clx"


def read_conf
	YAML.load File.read(DOT_CLX)
rescue
	nil
end

def write_conf(conf)
	yaml = YAML.dump(conf)
	File.open(DOT_CLX, "w") {|f|
		f.write yaml
	}
	puts "saved '#{DOT_CLX}'"
end


def connect_manager
	conf = read_conf
	unless conf
		puts "'#{DOT_CLX}' file does not exist."
		puts "run `#{$0} config -m <address[:port]>` first."
		exit 1
	end

	mgr = conf['manager']
	mgr_host, mgr_port = mgr.split(':',2)
	mgr_port ||= CLX::MANAGER_DEFAULT_PORT

	c = MessagePack::RPC::Client.new(mgr_host, mgr_port)
	c.timeout = TIMEOUT
	c
end


def get_agents
	list = []

	conf = read_conf || {}
	if manager = conf['manager']
		mgr_host, mgr_port = mgr.split(':',2)
		mgr_port ||= CLX::MANAGER_DEFAULT_PORT

		c = MessagePack::RPC::Client.new(mgr_host, mgr_port)
		c.timeout = TIMEOUT
		begin
			result = c.call(:agents)
		rescue StandardError, TimeoutError
			puts "can't connect to the manager."
			puts "error: #{$!}"
			exit 1
		ensure
			c.close
		end

		result.each {|addr, hostname|
			host, port = Address.parse(addr)
			list.push [host, port, hostname]
		}

	elsif agents = conf['agents']
		agents.each {|host_port, hostname|
			host, port = host_port.split(':',2)
			port ||= CLX::AGENT_DEFAULT_PORT
			list.push [host, port, hostname]
		}
	end

	list
end


def show_result(req)
	if req.error
		puts req.error.to_s
	elsif req.result.is_a?(String)
		puts req.result
	else
		puts req.result.inspect
	end
end


matches = []
matches_i = 0
ARGV.each {|arg|
	key, match = arg.split("=",2)
	break unless match
	matches.push [key, match]
	matches_i += 1
}
ARGV.slice!(0,matches_i)


if ARGV[0] == "-h" || ARGV[0] == "--help"
	puts "Usage #{File.basename($0)} [key=match ...] <command> [args...]"
	exit 1
end


case ARGV[0]
when "manager"
	ARGV.shift
	if ARGV.length != 1
		puts "Usage: #{File.dirname($0)} <address[:port]>"
		exit 1
	end

	write_conf({
		'manager' => ARGV[0]
	})

	exit 0

when "search"
	ARGV.shift
	require 'optparse'
	require 'timeout'
	opt = {
		:timeout => 5,
		:port => CLX::AGENT_DEFAULT_PORT,
		:add => false,
	}

	op = OptionParser.new
	op.on('-t', "--timeout SEC=#{opt[:timeout]}",
				"timeout time", Numeric) {|n| opt[:timeout] = n }
	op.on('-p', "--port PORT=#{opt[:port]}",
				"port", Integer) {|i| opt[:port] = i }
	op.on('-a', "--add",
				"add agents instead of replacing") {|b| opt[:addr] = b }

	op.parse!(ARGV)
	if ARGV.length != 0
		puts op.to_s
		exit 1
	end

	if opt[:add]
		conf = read_conf || {}
		agents = conf['agents'] || {}
	else
		agents = {}
	end

	sock = UDPSocket.new
	sock.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, 1)
	sock.send("", 0, "<broadcast>", opt[:port])
	begin
		Timeout.timeout(opt[:timeout]) do
			while true
				begin
					msg, addr = sock.recvfrom(2048)
					addr, hostname = MessagePack.unpack(msg)
					host, port = Address.parse(addr)
					agents["#{host}:#{port}"] = hostname
					puts "#{hostname}:\t#{host}:#{port}"
				rescue
				end
			end
		end
	rescue TimeoutError
	end

	if agents.empty?
		puts "no agents found"
		exit 1
	end

	write_conf({
		'agents' => agents
	})

	exit 0
end


agents = get_agents


lo = MessagePack::RPC::Loop.new

## check matches
agents = agents.map do |host, port, hostname|
	client = MessagePack::RPC::Client.new(host, port, lo)
	client.timeout = TIMEOUT

	reqs = matches.map {|key, match|
		req = client.send(:get, key)
		[ req, match ]
	}

	[client, hostname, reqs]
end

agents.map! do |client, hostname, reqs|
	values = reqs.map {|req, match|
		req.join rescue req.error = $!.to_s
		result = req.result  # ignore req.error
		[ result, match ]
	}
	[ client, hostname, values ]
end


def check_match_num_range(str, exp)
	m = /(.*?)\[\[([0-9\-\,]+)\]\](.*)/.match(exp)
	unless m
		return str == exp
	end

	prefix  = m[1]
	filelds = m[2].split(',')
	suffix  = m[3]

	ok = false
	filelds.each do |f|
		m = /([0-9]+)(?:\-([0-9]+))?/.match(f)
		if m[2]  # x-y
			from  = m[1]
			to    = m[2]
		else  # y
			from  = f
			to    = f
		end
		from_i = from.to_i
		to_i   = to.to_i

		if from.length == to.length && from[0] == ?0
			format = "%0#{from.length}d"
		else
			format = "%s"
		end

		(from_i..to_i).each {|i|
			if "#{prefix}#{format % i}#{suffix}" == str
				ok = true
				break
			end
		}
		break if ok
	end

	return ok
end

def check_match(result, exp)
	case result
	when NilClass
		return false

	when Array
		ok = false
		result.each {|r|
			if check_match(r, exp)
				ok = true
				break
			else
				ok = false
			end
		}
		return ok

	when String
		return check_match_num_range(result, exp)

	else
		return false
	end
end

agents.reject! do |client, hostname, values|
	remove = false
	values.each {|result, match|
		unless check_match(result, match)
			remove = true
			break
		end
	}
	remove
end


argv = ARGV.map {|a|
	if a == '-'
		STDIN.read
	else
		a
	end
}


if argv.empty?
	agents.each do |client, hostname, _|
		puts "#{hostname}:\t#{client.host}:#{client.port}"
	end

	exit 0
end


if argv[0] == "do"
	argv.shift

	agents.map! do |client, hostname, _|
		req = client.send('getall')
		[client, hostname, req]
	end

	agents.map! do |client, hostname, req|
		req.join rescue req.error = $!.to_s
		if info = req.result
			replaced = argv.map do |a|
				a.gsub(/\[\[([^\]]*)\]\]/) {|m| info[$~[1]] }
			end
			pid = fork
			unless pid
				exec *replaced
				exit! 127
			end
		end
		[ client, hostname, pid ]
	end

	agents.each do |client, hostname, pid|
		Process.waitpid(pid)
	end

	exit 0
end


agents.map! do |client, hostname, _|
	req = client.send(*argv)
	[client, hostname, req]
end

agents.each do |client, hostname, req|
	req.join rescue req.error = $!.to_s
	puts "#{hostname}:\t#{client.host}:#{client.port}"
	print "   ";  show_result(req)
	puts ""
end

