#!/usr/bin/env ruby

begin
require 'rubygems'
rescue Exception
end
require 'clx/default'
require 'clx/core'
require 'clx/addr'
require 'optparse'

opt = {
	:keepalive_interval => 1.0,
	:more_load => nil,
}


op = OptionParser.new

op.on('-i', "--interval SEC=#{opt[:keepalive_interval]}",
			"keepalive interval", Numeric) {|n| opt[:keepalive_interval] = n }

op.on('-e', "--more-load DIR",
			"load modules") {|s| opt[:more_load] = s }

op.banner += " <clx-agent.conf>"

op.parse!(ARGV)

if ARGV.length != 1
	puts op.to_s
	exit 1
end

conf_path = ARGV.shift


class AgentConfig
class << self
	def manager(addr)
		conf[:manager] = addr
	end

	def load_path(path)
		conf[:load_path] = path
	end

	def var_dir(path)
		conf[:var_dir] = path
	end

	def info
		conf[:info]
	end

	def listen(addr_port)
		if addr_port.to_s.to_i.to_s == addr_port.to_s
			conf[:listen] = "<any>:#{addr_port}"
		else
			conf[:listen] = addr_port
		end
	end

	private
	def conf
		const_get(:CONF)
	end
end
end

conf = {
	:manager => nil,
	:load_path => nil,
	:var_dir => nil,
	:listen => "<any>:#{CLX::AGENT_DEFAULT_PORT}",
	:info => {},
}

Class.new(AgentConfig) do
	const_set(:CONF, conf)
end.module_eval(File.read(conf_path), conf_path)

if !conf[:manager] || !conf[:load_path] || !conf[:var_dir]
	usage
end

self_host, self_port = conf[:listen].to_s.split(':',2)
self_port ||= CLX::AGENT_DEFAULT_PORT

mgr_host, mgr_port = conf[:manager].to_s.split(':',2)
mgr_port ||= CLX::MANAGER_DEFAULT_PORT

load_glob = "#{conf[:load_path]}/*.rb"


config = {
	:keepalive_interval => opt[:keepalive_interval],
	:port => self_port,
	:mgr_addr  => Address.new(mgr_host, mgr_port),
	:var_dir => conf[:var_dir],
	:info   => conf[:info],
}

core = CLX::Core.new(self_host, self_port, config)
core.scan_module("#{CLX::MOD_DIR}/agent/*.rb")
core.scan_module(load_glob)
core.scan_module("#{opt[:more_load]}/*.rb") if opt[:more_load]

while true
	begin
		core.run
	rescue
		$stderr.puts $!.to_s
		$!.backtrace.each do |line|
			$stderr.puts "  #{line}"
		end
	end
end

