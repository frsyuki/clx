#!/usr/bin/env ruby

begin
require 'rubygems'
rescue Exception
end
require 'clx/default'
require 'clx/core'
require 'clx/addr'
require 'optparse'

opt = {
	:config => nil,
	:manager => nil,
	:keepalive_interval => 1.0,
	:load_path => nil,
	:listen => "<any>:#{CLX::AGENT_DEFAULT_PORT}",
	:info => {},
	:cmd_serve => nil,
}

op = OptionParser.new

op.on('-f', "--config <clx-agent.conf>",
			"load config from the file") {|s| opt[:config] = s }

op.on('-m', "--manager <address[:port]>",
			"manager address") {|s| opt[:manager] = s }

op.on('-r', "--load-path DIR",
			"path to module directory") {|s| opt[:load_path] = s }

op.on('-l', "--listen <[address:]port>",
			"listen port") {|s| opt[:listen] = s }

op.on('-i', "--interval SEC=#{opt[:keepalive_interval]}",
			"keepalive interval", Numeric) {|n| opt[:keepalive_interval] = n }

op.on('-c', "--serve PATH",
			"path to serve command") {|s| opt[:cmd_serve] = s }

op.banner += " [key=match ...]"


matches = []
matches_i = 0
ARGV.each {|arg|
	key, match = arg.split("=",2)
	break unless match
	matches.push [key, match]
	matches_i += 1
}
ARGV.slice!(0,matches_i)


op.parse!(ARGV)

unless ARGV.empty?
	puts op.to_s
	exit 1
end


if file = opt[:config]
	class AgentConfig
	class << self
		def manager(addr)
			conf[:manager] = addr
		end

		def keepalive_interval(n)
			conf[:keepalive_interval] = n.to_f
		end

		def load_path(path)
			conf[:load_path] = path
		end

		def info
			conf[:info] ||= {}
		end

		def listen(addr_port)
			conf[:listen] = addr_port
		end

		private
		def conf
			const_get(:CONF)
		end
	end
	end

	conf = {}
	Class.new(AgentConfig) do
		const_set(:CONF, conf)
	end.module_eval(File.read(file), file)

	conf.each_pair {|key, value|
		opt[key] ||= value
	}
end


if !opt[:load_path]
	puts op.to_s
	puts "load-path is required"
	exit 1
end


if opt[:listen].to_s.to_i.to_s == opt[:listen].to_s
	opt[:listen] = "<any>:#{opt[:listen]}"
end

listen_host, listen_port = opt[:listen].to_s.split(':',2)
listen_port ||= CLX::AGENT_DEFAULT_PORT


load_glob = "#{opt[:load_path]}/*.rb"


config = {
	:listen_host => listen_host,
	:listen_port => listen_port,
	:keepalive_interval => opt[:keepalive_interval],
	:port => listen_port,
	:manager  => opt[:manager],
	:info   => opt[:info],
	:cmd_serve => opt[:cmd_serve],
}

core = CLX::Core.new(listen_host, listen_port, config)
core.scan_module("#{CLX::MOD_DIR}/agent/*.rb")
core.scan_module(load_glob)

while true
	begin
		core.run
	rescue
		$stderr.puts $!.to_s
		$!.backtrace.each do |line|
			$stderr.puts "  #{line}"
		end
	end
end

