#!/usr/bin/env ruby

begin
require 'rubygems'
rescue Exception
end
require 'clx/default'
require 'clx/core'
require 'clx/addr'

def usage
	puts "Usage: #{File.basename($0)} <clx-agent.conf>"
	exit 1
end

if ARGV.length != 1
	usage
end

conf = ARGV.shift


class AgentConfig
class << self
	def manager(addr)
		opt[:manager] = addr
	end

	def load_path(path)
		opt[:load_path] = path
	end

	def var_dir(path)
		opt[:var_dir] = path
	end

	def info
		opt[:info]
	end

	def listen(addr_port)
		if addr_port.to_s.to_i.to_s == addr_port.to_s
			opt[:listen] = "<any>:#{addr_port}"
		else
			opt[:listen] = addr_port
		end
	end

	private
	def opt
		const_get(:OPT)
	end
end
end

opt = {
	:manager => nil,
	:load_path => nil,
	:var_dir => nil,
	:listen => "<any>:#{CLX::AGENT_DEFAULT_PORT}",
	:info => {},
}

Class.new(AgentConfig) do
	const_set(:OPT, opt)
end.module_eval(File.read(conf), conf)

if !opt[:manager] || !opt[:load_path] || !opt[:var_dir]
	usage
end

self_host, self_port = opt[:listen].to_s.split(':',2)
self_port ||= CLX::AGENT_DEFAULT_PORT

mgr_host, mgr_port = opt[:manager].to_s.split(':',2)
mgr_port ||= CLX::MANAGER_DEFAULT_PORT

load_glob = "#{opt[:load_path]}/*.rb"


config = {
	:port => self_port,
	:mgr_addr  => Address.new(mgr_host, mgr_port),
	:var_dir => opt[:var_dir],
	:info   => opt[:info],
}

core = CLX::Core.new(self_host, self_port, config)
core.scan_module("#{CLX::MOD_DIR}/agent/*.rb")
core.scan_module(load_glob)

while true
	begin
		core.run
	rescue
		$stderr.puts $!.to_s
		$!.backtrace.each do |line|
			$stderr.puts "  #{line}"
		end
	end
end

